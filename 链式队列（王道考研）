#include <stdio.h>
#include <stdlib.h>
#define true 1
#define false 0
typedef int bool;
typedef char ElemType;

typedef struct LinkNode{
  ElemType data;
  struct LinkNode *next;
  /*！！！！！易出错！！！！！！！！*/
  /*虽然下面定义了别名，但是这里不能省略struct*/
}LinkNode;
/*链式队列*/
typedef struct{
    LinkNode *front,*rear;
    int lenth;
}LinkQueue;
/*front==rear==NULL时链栈为空*/



/*链式队列的节点结构*/
/*链式队列终归是队列，要满足先进先出的规则
  这里采用了两个指针，front和rear分别指向队列的头和尾
  进队先然要从队尾rear处进，出队要从队头front
*/









/*初始化*/
/*有一个头结点简化操作*/
LinkQueue *InitQueue(LinkQueue *q){
    q=(LinkQueue*)malloc(sizeof(LinkQueue));
    q->front=q->rear=(LinkNode*)malloc(sizeof(LinkNode));
    q->front->next=NULL;//！！！！！
    /*printf("\n***%p+++%p***\n",q->rear,q->front);*/
    return q;
}
/*判空*/
bool QueueEmpty(LinkQueue *q){
    if(q->front==q->rear){
        return true;
    }else{
        return false;
    }
}
/*入队*/
void EnQueue(LinkQueue *q,ElemType data){
    LinkNode *node=(LinkNode*)malloc(sizeof(LinkNode));
    node->data=data;
    node->next=NULL;
    q->rear->next=node;
    q->rear=node;
}
/*出队*/
ElemType DeQueue(LinkQueue *q){
    ElemType data;/*用于返回元素*/
    LinkNode *p;/*用于释放堆栈空间*/
    if(QueueEmpty(q)){
        printf("栈空Q!");
        exit(0);
    }else{
        p=q->front->next;/*先指向队头元素取出元素*!!!!!!!!易出错！！！！！/
        /*front是指向表头节点，并不指向第一个元素*/
        data=p->data;
        q->front->next=p->next;/*退栈*!!!!!!!!!!!!易出错！！！！！！*/
        free(p);/*释放堆栈空间*/
        return data;
    }
}






int main()
{

    /*测试*/
    printf("***********1-10进队：\n");
    LinkQueue *Q;
    Q=InitQueue(Q);
    /*printf("\n***%p+++%p***\n",Q->rear,Q->front);*/
    int n=1;
    ElemType x;
    while(n<=10){
        printf("%d入队\n",n);
        EnQueue(Q,n);
        n++;
    }
    printf("***********出队：\n");
    while(!QueueEmpty(Q)){
        x=DeQueue(Q);
        printf("%d出队\n",x);
    }
    printf("***********结束。\n");
    return 0;
}
